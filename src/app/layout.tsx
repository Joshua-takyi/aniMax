/**
 * Main Layout Component for the application
 *
 * This component is marked as a client component ('use client') because it:
 * 1. Uses interactive client-side components (ThemeProvider, QueryProvider)
 * 2. Needs access to browser APIs (for smooth scrolling, localStorage in query persistence)
 * 3. Includes React Query DevTools which are client-only
 * 4. Contains dynamic behavior that can't be rendered at build time
 *
 * The layout establishes the global application structure and providers that
 * wrap all pages, ensuring consistent styling, data fetching capabilities,
 * and application behavior throughout the site.
 *
 * Generated by Copilot
 */
"use client";
import { Inter } from "next/font/google";
import "./globals.css";
import { ThemeProvider } from "@/components/theme-provider";
import QueryProvider from "@/providers/provider";
import RenderMounted from "@/components/renderMounted";
import Script from "next/script";
import SmoothScroll from "@/components/lenis";
import { QueryClientProvider } from "@tanstack/react-query";
import { ReactQueryDevtools } from "@tanstack/react-query-devtools";
import { queryClient } from "@/lib/reactQueryConfig";

// Configure the Inter font with specific weights
const inter = Inter({
	subsets: ["latin"],
	weight: ["400", "700"],
});

// Metadata removed: Next.js metadata should be defined in a server component
// Create a separate metadata.ts file or move this to a server component layout
// Example: /src/app/metadata.ts or in a parent server component

export default function RootLayout({
	children,
}: Readonly<{
	children: React.ReactNode;
}>) {
	return (
		<html lang="en">
			<body className={`${inter.className}  antialiased `}>
				{/* Google Custom Search Integration */}
				<Script
					async
					src="https://cse.google.com/cse.js?cx=012345678901234567890:abcdefg"
					strategy="afterInteractive"
				/>
				<div className="gcse-search"></div>

				{/* RenderMounted ensures components only mount client-side */}
				<RenderMounted>
					{/* Theme configuration for dark/light mode */}
					<ThemeProvider
						attribute="class"
						defaultTheme="system"
						enableSystem
						disableTransitionOnChange
					>
						{/* React Query setup with nested providers */}
						<QueryClientProvider client={queryClient}>
							<QueryProvider>
								{/* Smooth scroll wrapper for better UX */}
								<SmoothScroll>{children}</SmoothScroll>
							</QueryProvider>
							{/* Development tools for React Query (only visible in development) */}
							<ReactQueryDevtools initialIsOpen={false} />
						</QueryClientProvider>
					</ThemeProvider>
				</RenderMounted>
			</body>
		</html>
	);
}
