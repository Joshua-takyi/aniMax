"use client";
import Loader from "@/app/loading";
import { CardComponent } from "@/components/itemsCard";
import { useSearchParams } from "next/navigation";
import { useCallback, useEffect, useState } from "react";
import { useInView } from "react-intersection-observer";
import { AnimatePresence } from "framer-motion";
import { MotionDiv } from "@/components/motion";
import { GetMovies, MovieProps } from "@/action";

export default function Movies() {
	const searchParams = useSearchParams();
	const genre = searchParams.get("genre") ?? "";
	const rating = searchParams.get("rating") ?? "";
	const status = searchParams.get("status") ?? "";
	const [currentPage, setCurrentPage] = useState(1);
	const [data, setData] = useState<MovieProps[]>([]);
	const [isLoadingMore, setIsLoadingMore] = useState(false);
	const [hasMore, setHasMore] = useState(true);
	const [isLoading, setIsLoading] = useState(true);
	const [error, setError] = useState<string | null>(null);
	const [rateLimited, setRateLimited] = useState(false);
	const { ref, inView } = useInView();

	/**
	 * Fetch movies from API
	 * @param page - Page number to fetch
	 * @returns Array of movie data
	 *
	 * ! Fix: Added proper error handling and typing
	 * ! Fix: Added rate limiting detection
	 * * Generated by Copilot
	 */
	const fetchMovies = useCallback(
		async (page: number) => {
			try {
				const res = await GetMovies({
					type: "movie", // Changed from "tv" to "movie"
					genre,
					rating,
					status,
					page,
				});

				if (res.rateLimited) {
					setRateLimited(true);
					setError(
						"API rate limit exceeded. Please try again in a few moments."
					);
					return [];
				}

				return res.data;
			} catch (error) {
				setError(
					error instanceof Error ? error.message : "Failed to fetch movies"
				);
				return [];
			}
		},
		[genre, rating, status]
	);

	/**
	 * Reset data and fetch when filters change
	 *
	 * ! Fix: Added reset logic when filters change
	 * * Generated by Copilot
	 */
	useEffect(() => {
		// Reset pagination and data when filters change
		setCurrentPage(1);
		setData([]);
		setHasMore(true);
		setError(null);

		const fetchInitialData = async () => {
			setIsLoading(true);
			try {
				const initialMovies = await fetchMovies(1);
				setData(initialMovies);
				setHasMore(initialMovies.length > 0);
			} catch (error) {
				console.error("Error fetching initial movies:", error);
			} finally {
				setIsLoading(false);
			}
		};

		fetchInitialData();
	}, [genre, rating, status, fetchMovies]);

	/**
	 * Handle infinite scroll functionality
	 *
	 * ! Fix: Only fetch more when not already loading and there's more data
	 * * Generated by Copilot
	 */
	useEffect(() => {
		const fetchMoreData = async () => {
			if (!inView || !hasMore || isLoadingMore || isLoading) return;

			setIsLoadingMore(true);
			try {
				const newMovies = await fetchMovies(currentPage + 1);
				if (newMovies.length === 0) {
					setHasMore(false);
				} else {
					setData((prevData) => [...prevData, ...newMovies]);
					setCurrentPage((prevPage) => prevPage + 1);
				}
			} catch (error) {
				console.error("Error fetching more movies:", error);
			} finally {
				setIsLoadingMore(false);
			}
		};

		fetchMoreData();
	}, [inView, currentPage, isLoadingMore, hasMore, isLoading, fetchMovies]);

	if (isLoading) {
		return <Loader />;
	}

	if (rateLimited) {
		return (
			<div className="text-center py-10">
				<p className="text-yellow-500 text-xl mb-4">
					⚠️ API Rate Limit Exceeded
				</p>
				<p className="mb-4">The Jikan API rate limit has been reached.</p>
				<button
					onClick={() => {
						setRateLimited(false);
						setError(null);
						setIsLoading(true);
						// Try again after a 2-second delay
						setTimeout(() => fetchMovies(currentPage), 2000);
					}}
					className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
				>
					Try Again
				</button>
			</div>
		);
	}

	if (error) {
		return <div className="text-center py-10 text-red-500">Error: {error}</div>;
	}

	if (!data || data.length === 0) {
		return (
			<div className="text-center py-10">
				No movies found matching your criteria
			</div>
		);
	}

	return (
		<main>
			{/* <h1 className="lg:text-4xl text-2xl font-semibold md:mb-10">Movies</h1> */}
			<AnimatePresence>
				<MotionDiv
					className="grid grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-3"
					initial={{ opacity: 0 }}
					animate={{ opacity: 1 }}
					transition={{ duration: 0.5 }}
				>
					{data.map((item: MovieProps, index) => (
						<CardComponent
							key={`${item.mal_id}-${index}`}
							title={item.title}
							rating={item.rating}
							imageUrl={item.images.webp.large_image_url}
							id={item.mal_id}
						/>
					))}
				</MotionDiv>
			</AnimatePresence>
			<div ref={ref} className="lg:pt-4">
				{isLoadingMore && <Loader />}
				{!hasMore && data.length > 0 && (
					<p className="text-center py-4 text-gray-500">
						No more movies to load
					</p>
				)}
			</div>
		</main>
	);
}
